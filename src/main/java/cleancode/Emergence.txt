Kent Beck's four rules of Simple Design
1. Run all the tests
    1.1. A system that cannot be verified should never be deployed
    1.2. Making sure our system is fully testable helps us create better designs
    1.3. Decoupling through dependency injection, interfaces and abstraction
2. Contains no duplication - Refactoring
    2.1. Increase cohesion, decrease coupling, separate concerns, modularize system concerns, shrink our functions and classes, choose better names and so on

    int size() {}
    boolean isEmpty() {}

    boolean isEmpty() {
        return 0 == size();
    }

    2.2. Template method pattern
        2.1.1. An abstract class exposes defined ways/templates to execute its methods, the ways/templates usually be used as FINAL
3. Expresses the intent of the programmer
    3.1. The majority of the cost of a software project is in long-term maintenance
    3.2. Design patterns - are largely about communication and expressiveness
    3.3. Tests: to act as documentation by example
    3.4. Try to be expressive - Care is a precious resource
4. Minimizes the number of classes and methods - SRP, SRP and SRP

